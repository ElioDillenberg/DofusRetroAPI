// <auto-generated />
using System;
using DofusRetroAPI.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DofusRetroAPI.Migrations
{
    [DbContext(typeof(DofusRetroDbContext))]
    partial class DofusRetroDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence("BaseLocalizedNameSequence");

            modelBuilder.HasSequence("ItemSequence");

            modelBuilder.HasSequence("MonsterSequence");

            modelBuilder.Entity("DofusRetroAPI.Entities.Drops.Drop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DropCap")
                        .HasColumnType("int");

                    b.Property<int>("DropTableId")
                        .HasColumnType("int");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int?>("ProspectionThreshold")
                        .HasColumnType("int");

                    b.Property<int>("Rate")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MonsterId");

                    b.ToTable("Drops");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.EquipmentCondition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ConditionType")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("Max")
                        .HasColumnType("int");

                    b.Property<int?>("Min")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.ToTable("EquipmentConditions");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.EquipmentEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EffectType")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentId")
                        .HasColumnType("int");

                    b.Property<int>("Max")
                        .HasColumnType("int");

                    b.Property<int>("Min")
                        .HasColumnType("int");

                    b.Property<int?>("SetBonusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentId");

                    b.HasIndex("SetBonusId");

                    b.ToTable("EquipmentEffects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("EquipmentEffect");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.PetFood", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EffectIncrease")
                        .HasColumnType("int");

                    b.Property<int>("EquipmentEffectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EquipmentEffectId");

                    b.ToTable("PetFoods");

                    b.HasDiscriminator<string>("Discriminator").HasValue("PetFood");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Set");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.SetBonus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("NumberOfItems")
                        .HasColumnType("int");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.ToTable("SetBonuses");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.SetEffect", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("EffectType")
                        .HasColumnType("int");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.Property<int>("Value")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SetId");

                    b.ToTable("SetEffects");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Weapons.WeaponCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionPoints")
                        .HasColumnType("int");

                    b.Property<int>("CriticalStrikeBaseChance")
                        .HasColumnType("int");

                    b.Property<int>("CriticalStrikeBonus")
                        .HasColumnType("int");

                    b.Property<int>("MaxRange")
                        .HasColumnType("int");

                    b.Property<int>("MinRange")
                        .HasColumnType("int");

                    b.Property<bool>("OneHand")
                        .HasColumnType("bit");

                    b.Property<int>("WeaponId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WeaponId")
                        .IsUnique();

                    b.ToTable("WeaponCharacteristic");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [ItemSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<int>("Image")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Pods")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.HasIndex("Image")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.ItemDescription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemDescriptions");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Recipes.Ingredient", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("RecipeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("RecipeId");

                    b.ToTable("Ingredients");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Recipes.Recipe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsSecret")
                        .HasColumnType("bit");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId")
                        .IsUnique();

                    b.ToTable("Recipes");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Localization.BaseLocalizedName", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [BaseLocalizedNameSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("Language")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.Monster", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValueSql("NEXT VALUE FOR [MonsterSequence]");

                    SqlServerPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("Breed")
                        .HasColumnType("int");

                    b.Property<int>("Ecosystem")
                        .HasColumnType("int");

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.MonsterCharacteristic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ActionPointAvoidance")
                        .HasColumnType("int");

                    b.Property<int>("ActionPoints")
                        .HasColumnType("int");

                    b.Property<int>("Agility")
                        .HasColumnType("int");

                    b.Property<int>("AirResistancePercentage")
                        .HasColumnType("int");

                    b.Property<int>("Chance")
                        .HasColumnType("int");

                    b.Property<int>("EarthResistancePercentage")
                        .HasColumnType("int");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<int>("FireResistancePercentage")
                        .HasColumnType("int");

                    b.Property<int>("HealthPoints")
                        .HasColumnType("int");

                    b.Property<int>("Initiative")
                        .HasColumnType("int");

                    b.Property<int>("Intelligence")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int>("MovementPointAvoidance")
                        .HasColumnType("int");

                    b.Property<int>("MovementPoints")
                        .HasColumnType("int");

                    b.Property<int>("NeutralResistancePercentage")
                        .HasColumnType("int");

                    b.Property<int>("Strength")
                        .HasColumnType("int");

                    b.Property<int>("WaterResistancePercentage")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterCharacteristics");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.PetEffect", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Equipments.EquipmentEffect");

                    b.Property<int>("ImprovedMax")
                        .HasColumnType("int");

                    b.Property<int?>("PetId")
                        .HasColumnType("int");

                    b.HasIndex("PetId");

                    b.HasDiscriminator().HasValue("PetEffect");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.ResourceEaters.ResourceEaterFood", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Equipments.Pets.PetFood");

                    b.Property<int?>("ResourceEaterId")
                        .HasColumnType("int");

                    b.Property<int>("ResourceId")
                        .HasColumnType("int");

                    b.HasIndex("ResourceEaterId");

                    b.HasIndex("ResourceId");

                    b.HasDiscriminator().HasValue("ResourceEaterFood");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.SoulEaters.SoulEaterFood", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Equipments.Pets.PetFood");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.Property<int?>("SoulEaterId")
                        .HasColumnType("int");

                    b.HasIndex("MonsterId");

                    b.HasIndex("SoulEaterId");

                    b.HasDiscriminator().HasValue("SoulEaterFood");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Cards.Card", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Item");

                    b.Property<int>("CardFamily")
                        .HasColumnType("int");

                    b.Property<int>("CardNumber")
                        .HasColumnType("int");

                    b.Property<int>("CardRarity")
                        .HasColumnType("int");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Consumables.Consumable", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Item");

                    b.Property<int>("ConsumableType")
                        .HasColumnType("int");

                    b.ToTable("Consumables");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Equipment", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Item");

                    b.Property<int>("EquipmentType")
                        .HasColumnType("int");

                    b.Property<int?>("SetId")
                        .HasColumnType("int");

                    b.HasIndex("SetId");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Resources.Resource", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Item");

                    b.Property<int>("ResourceType")
                        .HasColumnType("int");

                    b.ToTable("BaseResources");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.SetName", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Localization.BaseLocalizedName");

                    b.Property<int>("SetId")
                        .HasColumnType("int");

                    b.HasIndex("SetId");

                    b.ToTable("SetNames");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.ItemName", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Localization.BaseLocalizedName");

                    b.Property<int>("ItemId")
                        .HasColumnType("int");

                    b.HasIndex("ItemId");

                    b.ToTable("ItemNames");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.MonsterName", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Localization.BaseLocalizedName");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.HasIndex("MonsterId");

                    b.ToTable("MonsterNames");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.ArchMonster", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Monsters.Monster");

                    b.Property<int>("MonsterId")
                        .HasColumnType("int");

                    b.HasIndex("MonsterId")
                        .IsUnique()
                        .HasFilter("[MonsterId] IS NOT NULL");

                    b.ToTable("ArchMonsters");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.NormalMonster", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Monsters.Monster");

                    b.ToTable("NormalMonsters");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Gear.Gear", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Equipments.Equipment");

                    b.ToTable("Gears");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.Pet", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Equipments.Equipment");

                    b.ToTable((string)null);
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Weapons.Weapon", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Equipments.Equipment");

                    b.ToTable("Weapons");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.ResourceEaters.ResourceEater", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Equipments.Pets.Pet");

                    b.ToTable("FoodEaters");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.SoulEaters.SoulEater", b =>
                {
                    b.HasBaseType("DofusRetroAPI.Entities.Items.Equipments.Pets.Pet");

                    b.ToTable("SoulEaters");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Drops.Drop", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Item", "Item")
                        .WithMany("DropTable")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DofusRetroAPI.Entities.Monsters.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.EquipmentCondition", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Equipment", "Equipment")
                        .WithMany("EquipmentConditions")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.EquipmentEffect", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Equipment", "Equipment")
                        .WithMany("EquipmentEffects")
                        .HasForeignKey("EquipmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Sets.SetBonus", null)
                        .WithMany("EquipmentEffects")
                        .HasForeignKey("SetBonusId");

                    b.Navigation("Equipment");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.PetFood", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.EquipmentEffect", "Effect")
                        .WithMany()
                        .HasForeignKey("EquipmentEffectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Effect");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.SetBonus", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Sets.Set", "Set")
                        .WithMany("SetBonuses")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.SetEffect", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Sets.Set", "Set")
                        .WithMany()
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Weapons.WeaponCharacteristic", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Weapons.Weapon", "Weapon")
                        .WithOne("WeaponCharacteristic")
                        .HasForeignKey("DofusRetroAPI.Entities.Items.Equipments.Weapons.WeaponCharacteristic", "WeaponId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Weapon");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.ItemDescription", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Item", "Item")
                        .WithMany("Descriptions")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Recipes.Ingredient", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DofusRetroAPI.Entities.Items.Recipes.Recipe", "Recipe")
                        .WithMany()
                        .HasForeignKey("RecipeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Recipes.Recipe", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Item", "Item")
                        .WithOne("Recipe")
                        .HasForeignKey("DofusRetroAPI.Entities.Items.Recipes.Recipe", "ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.MonsterCharacteristic", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Monsters.Monster", "Monster")
                        .WithMany("Characteristics")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.PetEffect", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Pets.Pet", null)
                        .WithMany("Effects")
                        .HasForeignKey("PetId");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.ResourceEaters.ResourceEaterFood", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Pets.ResourceEaters.ResourceEater", null)
                        .WithMany("FoodTable")
                        .HasForeignKey("ResourceEaterId");

                    b.HasOne("DofusRetroAPI.Entities.Items.Resources.Resource", "Resource")
                        .WithMany()
                        .HasForeignKey("ResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Resource");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.SoulEaters.SoulEaterFood", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Monsters.Monster", "Monster")
                        .WithMany()
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Pets.SoulEaters.SoulEater", null)
                        .WithMany("FoodTable")
                        .HasForeignKey("SoulEaterId");

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Equipment", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Sets.Set", "Set")
                        .WithMany("Equipments")
                        .HasForeignKey("SetId");

                    b.Navigation("Set");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.SetName", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Equipments.Sets.Set", "Set")
                        .WithMany("SetNames")
                        .HasForeignKey("SetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Set");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.ItemName", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Items.Item", "Item")
                        .WithMany("Names")
                        .HasForeignKey("ItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Item");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.MonsterName", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Monsters.Monster", "Monster")
                        .WithMany("MonsterNames")
                        .HasForeignKey("MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.ArchMonster", b =>
                {
                    b.HasOne("DofusRetroAPI.Entities.Monsters.NormalMonster", "Monster")
                        .WithOne("ArchMonster")
                        .HasForeignKey("DofusRetroAPI.Entities.Monsters.ArchMonster", "MonsterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Monster");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.Set", b =>
                {
                    b.Navigation("Equipments");

                    b.Navigation("SetBonuses");

                    b.Navigation("SetNames");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Sets.SetBonus", b =>
                {
                    b.Navigation("EquipmentEffects");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Item", b =>
                {
                    b.Navigation("Descriptions");

                    b.Navigation("DropTable");

                    b.Navigation("Names");

                    b.Navigation("Recipe");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.Monster", b =>
                {
                    b.Navigation("Characteristics");

                    b.Navigation("MonsterNames");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Equipment", b =>
                {
                    b.Navigation("EquipmentConditions");

                    b.Navigation("EquipmentEffects");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Monsters.NormalMonster", b =>
                {
                    b.Navigation("ArchMonster");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.Pet", b =>
                {
                    b.Navigation("Effects");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Weapons.Weapon", b =>
                {
                    b.Navigation("WeaponCharacteristic");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.ResourceEaters.ResourceEater", b =>
                {
                    b.Navigation("FoodTable");
                });

            modelBuilder.Entity("DofusRetroAPI.Entities.Items.Equipments.Pets.SoulEaters.SoulEater", b =>
                {
                    b.Navigation("FoodTable");
                });
#pragma warning restore 612, 618
        }
    }
}
